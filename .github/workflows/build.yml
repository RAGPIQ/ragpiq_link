name: Build and Publish Electron App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Setup macOS signing keychain
        run: |
          echo "${{ secrets.MAC_P12_BASE64 }}" | base64 --decode > certificate.p12
          security create-keychain -p "buildkey" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "buildkey" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MAC_P12_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "buildkey" build.keychain

      - name: Download and extract portable-python
        run: |
          curl -L -o portable-python.zip https://github.com/RAGPIQ/ragpiq_link/releases/download/v2.1.27/portable-python.zip
          unzip -q portable-python.zip
      
      - name: Cleanup portable-python
        run: |
          find portable-python -name '__pycache__' -exec rm -rf {} +
          find portable-python -name '*.pyc' -delete
          find portable-python -name '*.pyo' -delete
          find portable-python -type d -name 'test*' -exec rm -rf {} +
          find portable-python -name '*.gif' -delete
          find portable-python -name '*.tcl' -delete
          find portable-python -name '*.png' -delete
          find portable-python -name '*.jpg' -delete
          find portable-python -name '*.jpeg' -delete
          find portable-python -name '*.txt' -delete
          find portable-python -name '*.rst' -delete
          find portable-python -name '*.md' -delete
          find portable-python -path '*/share/*' -exec rm -rf {} +
          find portable-python -path '*/doc/*' -exec rm -rf {} +

      - name: Clean portable-python for macOS
        if: runner.os == 'macOS'
        run: |
          # Remove unneeded files and directories
          find portable-python/mac -name '__pycache__' -exec rm -rf {} +
          find portable-python/mac -type f \( -name '*.pyc' -o -name '*.pyo' -o -name '*.py' -o -name '*.txt' -o -name '*.rst' -o -name '*.md' \) -delete
          find portable-python/mac -type d -name 'test*' -exec rm -rf {} +
          find portable-python/mac -type f \( -name '*.gif' -o -name '*.png' -o -name '*.tcl' -o -name '*.jpg' -o -name '*.jpeg' -o -name '*.tiff' -o -name '*.exe' -o -name '*.dll' -o -name '*.pyd' -o -name '*.bat' -o -name '*.pak' -o -name '*.icns' \) -delete
          find portable-python/mac -path '*/share/*' -exec rm -rf {} +
          find portable-python/mac -path '*/doc/*' -exec rm -rf {} +
          find portable-python/mac -name 'tclConfig.sh' -delete
          find portable-python/mac -name 'tclooConfig.sh' -delete
          find portable-python/mac -name '*.a' -delete

          # Remove executable bit from non-binaries
          find portable-python/mac -type f ! -name "*.dylib" ! -name "*.so" -exec chmod -x {} +

      - name: Build x64 app
        run: npx electron-builder --mac --x64
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build arm64 app
        run: npx electron-builder --mac --arm64
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Merge dylibs recursively into universal
        run: |
          set -euo pipefail
          APP_X64="dist/mac-x64/Ragpiq Link.app"
          APP_ARM="dist/mac-arm64/Ragpiq Link.app"
          OUT="dist/universal"

          rsync -a --delete "$APP_ARM/Contents/Resources/" "$OUT/Contents/Resources/"

          find "$APP_X64/Contents/Resources" -name '*.dylib' | while read f; do
            rel="${f#"$APP_X64/"}"
            other="$APP_ARM/$rel"
            out="$OUT/$rel"
            mkdir -p "$(dirname "$out")"
            if [[ -f "$other" ]]; then
              lipo -create "$f" "$other" -output "$out" || cp "$f" "$out"
            else
              cp "$f" "$out"
            fi
          done

      - name: Build universal app
        run: |
          electron-builder \
            --mac universal \
            --universal-arch-paths dist/mac-arm64 dist/mac-x64 \
            --universal-extra-files dist/universal
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          CSC_NAME: ${{ secrets.CSC_NAME }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NOTARIZE_APP_BUNDLE_ID: ${{ secrets.NOTARIZE_APP_BUNDLE_ID }}

      - name: Upload macOS Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/**/Ragpiq*.dmg
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Download and extract portable-python
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/RAGPIQ/ragpiq_link/releases/download/v2.1.27/portable-python.zip" -OutFile "portable-python.zip"
          Expand-Archive -Path "portable-python.zip" -DestinationPath "."

      - name: Build Windows app
        run: npx electron-builder --win --x64
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Windows Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/**/Ragpiq*.exe
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}